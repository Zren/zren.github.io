---
title: QML Profiling Plasmashell (Out of Date)
layout: post
---

Update: There is now an easier way to debug plasmashell. You no longer need to compile `plasma-workspace` in Qt Creator to debug plasmashell.

Please [read this article]({% post_url 2022-04-07-qml-profiling-plasmashell %}) on how to use the `qmlprofiler` command to create `.qtd` files you can load in Qt Creator.

-----

[A while back](https://github.com/Zren/plasma-applets/issues/118#issuecomment-362778737) I figured out how to use Qt Creator's QML Profiler to check my widgets. I imported the [`plasma-sdk` repository](https://invent.kde.org/plasma/plasma-sdk) which contains the `plasmoidviewer` process.

More recently I wondered if I could do the same to the full `plasmashell` process. First off is finding out which of KDE's hundreds of repository's owns the `plasmashell` process.

{% highlight bash %}
$ which plasmashell
/usr/bin/plasmashell
$ dpkg -S `which plasmashell` # Kubuntu/KDE Neon
plasma-workspace: /usr/bin/plasmashell
$ pacman -Qo `which plasmashell` # Arch/Manjaro
/usr/bin/plasmashell is owned by plasma-workspace
{% endhighlight %}

## Source Code and Dependencies

Okay lets try cloning the [`plasma-workspace` package](https://invent.kde.org/plasma/plasma-workspace).

```
mkdir ~/kde/src/plasma
cd ~/kde/src/plasma
git clone https://invent.kde.org/plasma/plasma-workspace.git
cd plasma-workspace
```

Note: You can clone the GitHub mirror (`https://github.com/KDE/plasma-workspace.git`) if you find the KDE servers too slow.

Next up is checking we have all the build dependencies installed. In Kubuntu it's as simple as running:

```
sudo apt-get build-dep plasma-workspace
```

For Arch/Manjaro, try looking at the `PKGBUILD` for the `makedepends` packages.

* <https://github.com/archlinux/svntogit-packages/blob/packages/plasma-workspace/trunk/PKGBUILD>
* <https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=plasma-workspace-git>

Once you have those installed, you should be able to compile the project.

```
cmake -B build -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_LIBEXECDIR=lib -DBUILD_TESTING=OFF
cmake --build build
```

Note that you can speed things up with `--parallel` to use all CPU Cores instead of just 1 core. You can also use `--parallel 5` to use 5 CPU cores. I have a 6 core CPU so that leaves 1 core for the OS + Firefox while waiting.

```
cmake --build build --parallel 5
```

If you run into an error, it might be because you are on the `master` branch containing code for the next version of Plasma. You may need to checkout the git branch for your current version of Plasma. Then run the build commands again.

```
git checkout Plasma/5.21
```

If the project reached `[100%] Built target ...` then it compiled successfully. We can now delete the `./build` directory since Qt Creator won't reuse it.

## Qt Creator Project Import

Now we can finally import the project in Qt Creator.

File > New File or Project (`Ctrl+N`)

Import Project > Import as qmake or cmake Project

![](/pic/2021-03-18___18-18-07.png)

* Name: `plasma-workspace`
* Location: `/home/chris/kde/src/plasma/plasma-workspace`

![](/pic/2021-03-18___18-12-53.png)

* Build system: `cmake`

![](/pic/2021-03-18___18-21-06.png)

On the final screen, you'll notice that it says it's going to generate a `CMakeLists.txt` file. Unfortunately this would overwrite our existing file, so before clicking finish, rename the existing `CMakeLists.txt` file to `CMakeLists-orig.txt`. Once you've done so, click Finish.

![](/pic/2021-03-18___18-43-34.png)

![](/pic/2021-03-18___18-48-32.png)

Lastly, we need to delete the `CMakeLists.txt` generated by Qt Creator, then rename the `CMakeLists-orig.txt` back to `CMakeLists.txt`.

![](/pic/2021-03-18___19-21-13.png)


## Qt Creator Project Config

Now to configure the Qt Creator project. The first thing you need to do is click the "Configure Project" button to confirm that we want to use the default Qt version to compile the project.

![](/pic/2021-03-18___19-07-51.png)

Next we want to configure the Build and Run. Click the Project tab on the left sidebar.

![](/pic/2021-03-18___19-14-03.png)

By default, Qt Creator will only use 1 CPU core to compile the project. So like before, we'll edit the `cmake` command to use `--parallel 5`.

![](/pic/2021-03-18___19-16-01.png)

Next we need to configure the Run command. Click the "Run" settings section.

![](/pic/2021-03-18___19-25-04.png)

The `plasma-workspace` git repository contains a dozen or so executable programs in it. So we need to specify that we want to test the `plasmashell` process.

We need to change the "Run Configuration" from `plasma-workspace` to `plasmashell`.

We also want to add `--replace` to the "command line arguments" so that we cleanly terminate the existing `plasmashell` process.

![](/pic/2021-03-18___19-28-39.png)

Now hit the green triangle in the bottm left to Run (`Ctrl+R`) the project.

Click "Compile Output" in the bottom to watch it go. Since it's the first time (in Qt Creator) it'll take a while, but consecutive runs should be faster.

![](/pic/2021-03-18___19-32-49.png)

When it finally runs, your panel will disappear, then reappear.

If does not reappear after a minute for some reason, run the following command in KRunner (`Alt+Space`).

```
killall plasmashell ; kstart5 plasmashell
```

If all went well and the panel reappeared correctly after we clicked "Run" in Qt Creator, we can move on to debugging!

# Debugging

We can press the "Run" icon with the bug on it to run the project with the gdb debugger.

If you click on the "Debug" tab in the sidebar, you'll see a GUI for the GDB debugger.

While it's very useful for stepping through C++ code line by line, but it is not helpful for debugging QML.

![](/pic/2021-03-18___19-58-41.png)

You can click the "Debugger" dropdown to switch to "Memcheck" (`valgrind`) or Callcheck (`valgrind --tool=callgrind`). Both are very slow to run.

![](/pic/2021-03-18___20-02-22.png)

`valgrind` is a pretty useful tool. I've run it's `--tool=massif` in the terminal before to check the memory allocation. I then ran `plasmashell --replace` afterwards so terminate the "valgrind" plasmashell so it would generate a `massif.out.131374` file. You can open these files in `massif-visualizer`.

{% highlight bash %}
valgrind --tool=massif plasmashell --replace
plasmashell --replace # Ran in another Tab
{% endhighlight %}

![](/pic/2021-03-18___20-11-20.png)

Unfortunately, massif is also very slow to run `plasmashell`. Perhaps someday I'll figure out how to make it start `plasmashell` normally, then begin taking snapshots when it RAM usage creeps up. Right now it's starts Plasma so slowly that a number of services timeout.

We need something we can toggle on/off with a GUI. Like Qt Creator's QML profiler!

# QML Debugging

To launch Qt Creator's QML debugger, you will need to go back to the project's Build configuration to change "QML debugging and profiling" from "Leave at Default" to "Enable".

![](/pic/2021-03-18___19-47-22.png)

Since we're also using a CMake project, the [Qt QML Debugging documentation](https://doc.qt.io/qt-5/qtquick-debugging.html#qml-debugging-infrastructure) mentions we need to define `QT_QML_DEBUG` for the compiler. This step stumped me for a while until I read [an old changelog](https://kde.org/announcements/changelogs/plasma/5/5.6.5-5.7.0/) that mentioned this [commit](https://invent.kde.org/plasma/discover/-/commit/05ca0b8a6a93082dd26165de41dce86ff8b0a48b) in Discover.

So open up `shell/main.cpp` (shell > plasmashell > Source Files > `main.cpp`) and add `#define QT_QML_DEBUG` to the top of the file.

![](/pic/2021-03-18___20-28-04.png)


Now select "QML Profiler" in the Debug tab dropdown. Then "Start QML Profiler analysis". It'll take a second, but is way faster than valgrind.

![](/pic/2021-03-18___20-31-52.png)

After about 30 seconds, I clicked the circle "Stop Profiling" button. Do not press the square "Stop" button or `plasmashell` will be terminated. You can stop and start profiling as needed!

![](/pic/2021-03-18___20-33-15.png)

You'll notice a number of sections in the timeline. "Pixmap Cache", "Scene Graph", "Memory Usage", "Debug Messages", "Animations", "Compiling", "Creating", "Binding", "Handling Signal", and "JavaScript".

<video src="/vid/screen-2021-03-18_20.46.41.mp4" width="100%" autoplay loop muted controls></video>

The timeline can be scrolled, and clicked to view the details. Use `Ctrl+MouseWheel` to zoom if something is hard to click. As you can see in the video, it seems it took a while to load my wallpaper and the tile images in my [Tiled Menu](https://store.kde.org/p/1160672/) app launcher. This "Pixmap Cache" is likely asynchronous however since it's IO.

<video src="/vid/screen-2021-03-18_20.41.38.mp4" width="100%" autoplay loop muted controls></video>

There's an interesting Memory Usage section which should be useful.

![](/pic/2021-03-18___20-56-29.png)

There's also a "Flame Graph" and "Statistics" tab which tell me that my [Event Calendar widget](https://store.kde.org/p/998901/) code could be better. Functions are starting, then ending much later.

![](/pic/2021-03-18___20-42-22.png)

![](/pic/2021-03-18___20-43-13.png)
